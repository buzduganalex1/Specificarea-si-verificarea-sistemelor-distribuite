<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE workspaceElements PUBLIC "-//CPN//DTD CPNXML 1.0//EN" "http://cpntools.org/DTD/6/cpn.dtd">

<workspaceElements>
  <generator tool="CPN Tools"
             version="4.0.1"
             format="6"/>
  <cpnet>
    <globbox>
      <block id="ID1412310166">
        <id>Standard priorities</id>
        <ml id="ID1412310255">val P_HIGH = 100;
          <layout>val P_HIGH = 100;</layout>
        </ml>
        <ml id="ID1412310292">val P_NORMAL = 1000;
          <layout>val P_NORMAL = 1000;</layout>
        </ml>
        <ml id="ID1412310322">val P_LOW = 10000;
          <layout>val P_LOW = 10000;</layout>
        </ml>
      </block>
      <block id="ID1">
        <id>Standard declarations</id>
        <color id="ID85042">
          <id>UNIT</id>
          <unit/>
          <layout>colset UNIT = unit;</layout>
        </color>
        <color id="ID4">
          <id>BOOL</id>
          <bool/>
        </color>
        <color id="ID3">
          <id>INT</id>
          <int/>
        </color>
        <color id="ID1412312409">
          <id>INTINF</id>
          <intinf/>
          <layout>colset INTINF = intinf;</layout>
        </color>
        <color id="ID1412312425">
          <id>TIME</id>
          <time/>
          <layout>colset TIME = time;</layout>
        </color>
        <color id="ID1412322990">
          <id>REAL</id>
          <real/>
          <layout>colset REAL = real;</layout>
        </color>
        <color id="ID5">
          <id>STRING</id>
          <string/>
        </color>
        <color id="ID1414254670">
          <id>Id</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset Id = INT;</layout>
        </color>
        <color id="ID1414287463">
          <id>Name</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Name = STRING;</layout>
        </color>
        <color id="ID1414287714">
          <id>Surname</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Surname = STRING;</layout>
        </color>
        <color id="ID1414288453">
          <id>DeliveryAdress</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset DeliveryAdress = STRING;</layout>
        </color>
        <color id="ID1414288875">
          <id>Username</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Username = STRING;</layout>
        </color>
        <color id="ID1414290087">
          <id>DeliveryType</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset DeliveryType = INT;</layout>
        </color>
        <color id="ID1414289370">
          <id>Password</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Password = STRING;</layout>
        </color>
        <color id="ID1414292457">
          <id>UserType</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset UserType = INT;</layout>
        </color>
        <color id="ID1414290093">
          <id>Notification</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Notification = STRING;</layout>
        </color>
        <color id="ID1414261685">
          <id>OrderStatus</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset OrderStatus = INT;</layout>
        </color>
        <color id="ID1414291694">
          <id>Quantity</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset Quantity = INT;</layout>
        </color>
        <color id="ID1414291898">
          <id>Description</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Description = STRING;</layout>
        </color>
        <color id="ID1414291901">
          <id>Category</id>
          <alias>
            <id>STRING</id>
          </alias>
          <layout>colset Category = STRING;</layout>
        </color>
        <color id="ID1414292124">
          <id>ProductId</id>
          <alias>
            <id>Id</id>
          </alias>
          <layout>colset ProductId = Id;</layout>
        </color>
        <color id="ID1414292694">
          <id>UserId</id>
          <alias>
            <id>Id</id>
          </alias>
          <layout>colset UserId = Id;</layout>
        </color>
        <color id="ID1414293859">
          <id>Total</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset Total = INT;</layout>
        </color>
        <color id="ID1414293897">
          <id>Status</id>
          <alias>
            <id>INT</id>
          </alias>
          <layout>colset Status = INT;</layout>
        </color>
        <color id="ID1414290072">
          <id>UserDetails</id>
          <product>
            <id>Name</id>
            <id>Surname</id>
            <id>DeliveryAdress</id>
          </product>
          <layout>colset UserDetails = product Name*Surname*DeliveryAdress;</layout>
        </color>
        <color id="ID1414033748">
          <id>User</id>
          <product>
            <id>Id</id>
            <id>Username</id>
            <id>Password</id>
            <id>UserType</id>
            <id>UserDetails</id>
          </product>
          <layout>colset User = product Id*Username*Password*UserType*UserDetails;</layout>
        </color>
        <color id="ID1414290075">
          <id>Price</id>
          <product>
            <id>INT</id>
            <id>STRING</id>
          </product>
          <layout>colset Price = product INT*STRING;</layout>
        </color>
        <color id="ID1414290078">
          <id>Product</id>
          <product>
            <id>Id</id>
            <id>Description</id>
            <id>Category</id>
            <id>Price</id>
            <id>Quantity</id>
          </product>
          <layout>colset Product = product Id*Description*Category*Price*Quantity;</layout>
        </color>
        <color id="ID1414199947">
          <id>Products</id>
          <list>
            <id>Product</id>
          </list>
          <layout>colset Products = list Product;</layout>
        </color>
        <color id="ID1414293074">
          <id>Users</id>
          <list>
            <id>User</id>
          </list>
          <layout>colset Users = list User;</layout>
        </color>
        <color id="ID1414290084">
          <id>Order</id>
          <product>
            <id>Id</id>
            <id>UserId</id>
            <id>Products</id>
            <id>Status</id>
            <id>DeliveryType</id>
            <id>Total</id>
          </product>
          <layout>colset Order = product Id*UserId*Products*Status*DeliveryType*Total;</layout>
        </color>
        <var id="ID1414104640">
          <type>
            <id>Users</id>
          </type>
          <id>users</id>
          <layout>var users : Users;</layout>
        </var>
        <var id="ID1414202379">
          <type>
            <id>Products</id>
          </type>
          <id>products</id>
          <layout>var products : Products;</layout>
        </var>
        <var id="ID1414062708">
          <type>
            <id>User</id>
          </type>
          <id>client</id>
          <layout>var client : User;</layout>
        </var>
        <var id="ID1414108883">
          <type>
            <id>User</id>
          </type>
          <id>admin</id>
          <layout>var admin : User;</layout>
        </var>
        <ml id="ID1414033848">fun RegisterUser(list, user) = ins list user;
          <layout>fun RegisterUser(list, user) = ins list user;</layout>
        </ml>
        <ml id="ID1414051159">fun IsRegistered(userList, user) = contains userList [user]
          <layout>fun IsRegistered(userList, user) = contains userList [user]</layout>
        </ml>
        <ml id="ID1414129228">fun IsAdmin((_,userType,_,_)) = userType = 0
          <layout>fun IsAdmin((_,userType,_,_)) = userType = 0</layout>
        </ml>
        <ml id="ID1414146615">fun CanLogin(userList,(userType,username,password)) = contains userList [(userType, username, password)]
          <layout>fun CanLogin(userList,(userType,username,password)) = contains userList [(userType, username, password)]</layout>
        </ml>
        <ml id="ID1414307714">fun GenerateId() = discrete (0,1000000000)
          <layout>fun GenerateId() = discrete (0,1000000000)</layout>
        </ml>
        <ml id="ID1414657218">fun GetProducts(productList) = productList;
          <layout>fun GetProducts(productList) = productList;</layout>
        </ml>
        <ml id="ID1414664631">fun GetQuantityForProduct(products, productId) = rmall 0 (map (fn (id,_,_,_,quantity) =&gt; if (id=productId) then quantity else 0) products);
          <layout>fun GetQuantityForProduct(products, productId) = rmall 0 (map (fn (id,_,_,_,quantity) =&gt; if (id=productId) then quantity else 0) products);</layout>
        </ml>
        <ml id="ID1414670623">fun FilterProducts (products, category) =  List.filter (fn((_,_,c,_,_)) =&gt; c=category) products;
          <layout>fun FilterProducts (products, category) =  List.filter (fn((_,_,c,_,_)) =&gt; c=category) products;</layout>
        </ml>
        <ml id="ID1414673638">fun SetProductQuantity (productId, quantity, []) = []
    | SetProductQuantity (productId, quantity, (id,a,b,c,q) :: products) = (if id = productId then (id,a,b,c,quantity) else (id,a,b,c,q)) :: (SetProductQuantity (productId,quantity, products));
          <layout>fun SetProductQuantity (productId, quantity, []) = []
    | SetProductQuantity (productId, quantity, (id,a,b,c,q) :: products) = (if id = productId then (id,a,b,c,quantity) else (id,a,b,c,q)) :: (SetProductQuantity (productId,quantity, products));</layout>
        </ml>
        <ml id="ID1414676665">fun GetProduct (products, productId) = List.nth(List.filter (fn((id,_,_,_,_)) =&gt; id=productId) products, 0);
          <layout>fun GetProduct (products, productId) = List.nth(List.filter (fn((id,_,_,_,_)) =&gt; id=productId) products, 0);</layout>
        </ml>
        <ml id="ID1414680587">fun RemoveProduct(products, productId) = rmall (GetProduct(products, productId)) products;
          <layout>fun RemoveProduct(products, productId) = rmall (GetProduct(products, productId)) products;</layout>
        </ml>
        <ml id="ID1414700890">fun GetProductsTotalValue[] = 0
  | GetProductsTotalValue((_,_,_,price,_)::products) = price + GetProductsTotalValue products;
          <layout>fun GetProductsTotalValue[] = 0
  | GetProductsTotalValue((_,_,_,price,_)::products) = price + GetProductsTotalValue products;</layout>
        </ml>
      </block>
    </globbox>
    <page id="ID6">
      <pageattr name="Admin"/>
      <constraints/>
    </page>
    <page id="ID1414032319">
      <pageattr name="Delivery"/>
      <constraints/>
    </page>
    <page id="ID1414294407">
      <pageattr name="Users"/>
      <constraints/>
      <Aux id="ID1414294953">
        <posattr x="-546.000000"
                 y="840.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val adminType = 0;
val clientType = 1;
val adminId = GenerateId();
val clientId = GenerateId();
val clientDetails = (&quot;Alex&quot;,&quot;Buzdugan&quot;,&quot;Strada Bucuresti&quot;);
val client = (clientId,&quot;Username&quot;,&quot;password&quot;,clientType,clientDetails);
val adminDetails = (&quot;Admin&quot;,&quot;Admin&quot;,&quot;Strada Bucuresti 2&quot;);
val admin = (adminId,&quot;Admin&quot;,&quot;password&quot;,adminType,adminDetails);
val users = [client,admin];</text>
      </Aux>
      <Aux id="ID1414296352">
        <posattr x="-546.000000"
                 y="672.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>fun IsAdmin((_,_,_,userType,_)) = userType = 0;
fun IsRegistered(users, user) = contains users [user];
fun CanLogin(users, user) = contains users [user];
fun RegisterUser(users, user) = ins users user;</text>
      </Aux>
      <Aux id="ID1414296994">
        <posattr x="-546.000000"
                 y="546.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>IsAdmin(client);
IsAdmin(admin);
IsRegistered(users,client);
IsRegistered(users,admin);
CanLogin(users,client);
CanLogin(users,admin);</text>
      </Aux>
    </page>
    <page id="ID1414303899">
      <pageattr name="Utils"/>
      <constraints/>
      <Aux id="ID1414304659">
        <posattr x="-462.000000"
                 y="366.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>fun GenerateId() = discrete (0,1000000000)

val test = GenerateId();</text>
      </Aux>
    </page>
    <page id="ID1414318467">
      <pageattr name="Products"/>
      <constraints/>
      <Aux id="ID1414321233">
        <posattr x="-714.000000"
                 y="565.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val breadId = GenerateId();
val breadCategory = &quot;Bakery&quot;;
val breadPrice = 10;
val breadDescription = &quot;Bread&quot;
val breadQuantity = 100;
val bread = (breadId,breadDescription,breadCategory,breadPrice,breadQuantity);

val cheeseId = GenerateId();
val cheeseCategory = &quot;Dairy&quot;;
val cheesePrice = 20;
val cheeseDescription = &quot;Cheese&quot;;
val cheeseQuantity = 50;
val cheese = (cheeseId,cheeseDescription,cheeseCategory,cheesePrice,cheeseQuantity);

val sausageId = GenerateId();
val sausageCategory = &quot;Meat&quot;;
val sausagePrice = 30;
val sausageDescription = &quot;Sausage&quot;;
val sausageQuantity = 30;
val sausage = (sausageId,sausageDescription,sausageCategory,sausagePrice,sausageQuantity);

val products = [bread,sausage,cheese];</text>
      </Aux>
      <Aux id="ID1414322048">
        <posattr x="-714.000000"
                 y="210.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>fun GetProducts(productList) = productList;
fun GetQuantityForProduct(products, productId) = rmall 0 (map (fn (id,_,_,_,quantity) =&gt; if (id=productId) then quantity else 0) products)
fun FilterProducts (products, category) =  List.filter (fn((_,_,c,_,_)) =&gt; c=category) products;
fun SetProductQuantity (productId, quantity, []) = []
    | SetProductQuantity (productId, quantity, (id,a,b,c,q) :: products) = (if id = productId then (id,a,b,c,quantity) else (id,a,b,c,q)) :: (SetProductQuantity (productId,quantity, products));
fun GetProduct (products, productId) = List.nth(List.filter (fn((id,_,_,_,_)) =&gt; id=productId) products, 0);
fun RemoveProduct(products, productId) = rmall (GetProduct(products, productId)) products;
fun GetProductsTotalValue[] = 0
  | GetProductsTotalValue((_,_,_,price,_)::products) = price + GetProductsTotalValue products</text>
      </Aux>
      <Aux id="ID1414322875">
        <posattr x="-714.000000"
                 y="61.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>GetProducts(products);
FilterProducts(products,&quot;Bakery&quot;);
FilterProducts(products,&quot;Meat&quot;);
FilterProducts(products,&quot;Dairy&quot;);
FilterProducts(products,&quot;None&quot;);
GetQuantityForProduct(products, breadId);
GetQuantityForProduct(SetProductQuantity(breadId, 300,products), breadId);
GetProduct(products,breadId);
RemoveProduct(products,breadId);
GetProductsTotalValue(products);</text>
      </Aux>
    </page>
    <page id="ID1414578126">
      <pageattr name="Orders"/>
      <constraints/>
      <Aux id="ID1414604757">
        <posattr x="-1302.000000"
                 y="275.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>fun GetUserOrders((userId,_,_,_,_), orders) = List.filter (fn((_,id,_,_,_,_)) =&gt; id=userId) orders;
fun GetOrder(orderId, orders)= List.nth(List.filter (fn((id,_,_,_,_,_)) =&gt; id=orderId) orders,0);
fun AddProductInUserOrder((id,userId,products,status,deliveryType,total),product,quantity) = (id,userId,ins products product,status,deliveryType,total);
fun SetOrderDeliveryType((id,userId,products,status,deliveryType,total), orderDeliveryType) = (id,userId,products,status,orderDeliveryType,total);
fun SetOrderStatus((id,userId,products,status,deliveryType,total), orderStatus) = (id,userId,products,orderStatus,deliveryType,total);
fun CalculateOrderTotal((id,userId,products,status,deliveryType,total)) = (id,userId,products,status,deliveryType,GetProductsTotalValue(products));
fun CreateUserOrder((client1Id,_,_,_,_)) = (GenerateId(), client1Id, []:(int*string*string*int*int) list, 0, 0,0)



</text>
      </Aux>
      <Aux id="ID1414608854">
        <posattr x="-1302.000000"
                 y="138.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>GetUserOrders(client1, orders);
GetUserOrders(client2, orders);
GetOrder(client1OrderId,orders);
AddProductInUserOrder(client1Order,bread,1);
SetOrderDeliveryType(client1Order,1);
SetOrderStatus(client1Order,1);
CalculateOrderTotal(client1Order);
CreateUserOrder(client1);</text>
      </Aux>
      <Aux id="ID1414681668">
        <posattr x="-1302.000000"
                 y="940.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val client1Type = 1;
val client2Type = 1;
val client1Id = GenerateId();
val client2Id = GenerateId();
val client1Details = (&quot;client1&quot;,&quot;client1&quot;,&quot;Strada Bucuresti&quot;);
val client2Details = (&quot;client2&quot;,&quot;client2&quot;,&quot;Strada Bucuresti 2&quot;);
val client1 = (client1Id,&quot;Username&quot;,&quot;password&quot;,client1Type,client1Details);
val client2 = (client2Id,&quot;client2&quot;,&quot;password&quot;,client2Type,client2Details);
val users = [client1,client2];

val breadId = GenerateId();
val breadCategory = &quot;Bakery&quot;;
val breadPrice = 10;
val breadDescription = &quot;Bread&quot;
val breadQuantity = 100;
val bread = (breadId,breadDescription,breadCategory,breadPrice,breadQuantity);

val cheeseId = GenerateId();
val cheeseCategory = &quot;Dairy&quot;;
val cheesePrice = 20;
val cheeseDescription = &quot;Cheese&quot;;
val cheeseQuantity = 50;
val cheese = (cheeseId,cheeseDescription,cheeseCategory,cheesePrice,cheeseQuantity);

val sausageId = GenerateId();
val sausageCategory = &quot;Meat&quot;;
val sausagePrice = 30;
val sausageDescription = &quot;Sausage&quot;;
val sausageQuantity = 30;
val sausage = (sausageId,sausageDescription,sausageCategory,sausagePrice,sausageQuantity);

val products = [bread,sausage,cheese];

val client1OrderId = GenerateId();
val client1OrderDeliveryType = 0
val client1OrderStatus = 0;
val client1Order = (client1OrderId, client1Id, [], client1OrderStatus, client1OrderDeliveryType,0)

val client2OrderId = GenerateId();
val client2OrderDeliveryType = 0;
val client2OrderStatus = 0;
val client2Order = (client2OrderId, client2Id, [sausage], client2OrderStatus, client2OrderDeliveryType,0)

val orders = [client1Order, client2Order];</text>
      </Aux>
      <Aux id="ID1414713777">
        <posattr x="-1302.000000"
                 y="-12.000000"/>
        <fillattr colour="White"
                  pattern=""
                  filled="false"/>
        <lineattr colour="Black"
                  thick="1"
                  type="Solid"/>
        <textattr colour="Black"
                  bold="false"/>
        <label/>
        <text>val newOrder = CreateUserOrder(client1);
GetUserOrders(client1, orders);
SetOrderDeliveryType(newOrder,1);
SetOrderStatus(newOrder,1);
val test = AddProductInUserOrder(newOrder,bread,1);
val test = AddProductInUserOrder(test,bread,1);
CalculateOrderTotal(test);
</text>
      </Aux>
    </page>
    <instances>
      <instance id="ID2149"
                page="ID6"/>
      <instance id="ID1414032321"
                page="ID1414032319"/>
      <instance id="ID1414294409"
                page="ID1414294407"/>
      <instance id="ID1414303901"
                page="ID1414303899"/>
      <instance id="ID1414318469"
                page="ID1414318467"/>
      <instance id="ID1414578131"
                page="ID1414578126"/>
    </instances>
    <options>
      <option name="realtimestamp">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="fair_be">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="global_fairness">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="outputdirectory">
        <value>
          <text>&lt;same as model&gt;</text>
        </value>
      </option>
      <option name="extensions.10001.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10005.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10004.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10002.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10003.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="extensions.10006.enable">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repciavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repcount">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="replastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repstddev">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="repsum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="repvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="avg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="count">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="firstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="max">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="min">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="ssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="ssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="stddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="sum">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="variance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="firstupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="interval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="lastupdate">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedavg">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedciavg">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedcount">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedfirstval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedlastval">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedmax">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedmin">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedssquare">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedssqdev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedstddev">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
      <option name="untimedsum">
        <value>
          <boolean>true</boolean>
        </value>
      </option>
      <option name="untimedvariance">
        <value>
          <boolean>false</boolean>
        </value>
      </option>
    </options>
    <binders>
      <cpnbinder id="ID1414039604"
                 x="262"
                 y="45"
                 width="958"
                 height="962">
        <sheets>
          <cpnsheet id="ID1414294528"
                    panx="148.000000"
                    pany="415.000000"
                    zoom="1.000000"
                    instance="ID1414294409">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
          <cpnsheet id="ID1414304397"
                    panx="0.000000"
                    pany="0.000000"
                    zoom="1.000000"
                    instance="ID1414303901">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
          <cpnsheet id="ID1414319242"
                    panx="312.000000"
                    pany="145.000000"
                    zoom="1.000000"
                    instance="ID1414318469">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
          <cpnsheet id="ID1414580739"
                    panx="963.000000"
                    pany="-36.000000"
                    zoom="1.000000"
                    instance="ID1414578131">
            <zorder>
              <position value="0"/>
            </zorder>
          </cpnsheet>
        </sheets>
        <zorder>
          <position value="1"/>
          <position value="0"/>
          <position value="2"/>
          <position value="3"/>
        </zorder>
      </cpnbinder>
    </binders>
    <monitorblock name="Monitors"/>
    <IndexNode expanded="false">
      <IndexNode expanded="false"/>
      <IndexNode expanded="false"/>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false"/>
        <IndexNode expanded="false">
          <IndexNode expanded="false">
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
            <IndexNode expanded="false">
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
              <IndexNode expanded="false"/>
            </IndexNode>
          </IndexNode>
          <IndexNode expanded="false">
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
            <IndexNode expanded="false"/>
          </IndexNode>
        </IndexNode>
        <IndexNode expanded="false">
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
          <IndexNode expanded="false"/>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false">
        <IndexNode expanded="false"/>
      </IndexNode>
      <IndexNode expanded="true">
        <IndexNode expanded="false">
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
        </IndexNode>
        <IndexNode expanded="true">
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
          <IndexNode expanded="true"/>
        </IndexNode>
      </IndexNode>
      <IndexNode expanded="false"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
      <IndexNode expanded="true"/>
    </IndexNode>
  </cpnet>
</workspaceElements>